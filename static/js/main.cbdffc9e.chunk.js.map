{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","res","json","data","catch","err","console","log","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAuCA,SAASA,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,IAC3B,OAAO,qBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAG7D,SAASC,EAAT,GAAgC,IAAVC,EAAS,EAATA,MAClB,OAAO,sBAAMF,UAAU,cAAhB,SAA+BE,IA0B3BC,MApDf,YAAqD,IAApCJ,EAAmC,EAAnCA,MAAOH,EAA4B,EAA5BA,OAAQQ,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SACpC,OACI,sBAAKL,UAAU,QAAf,UACI,qBAAKA,UAAU,iBAAf,SACI,cAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,MAEtC,sBAAKC,UAAU,iBAAf,UACI,6BAAKD,IACL,qBAAKC,UAAU,gBAAf,SACKI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OACR,cAACN,EAAD,CAAYC,MAAOA,GAAYK,QAGvC,mBAAGP,UAAU,kBAAb,SACI,cAAC,IAAD,CAAeQ,KAAMH,EAAUI,QAAQ,IAAIC,SAAS,MAAMC,WAAS,EAACC,QAAQ,qBCcjFC,E,4MAlCXC,MAAQ,G,EAMRC,cAAgB,WAKZ,OAJe,EAAKD,MAAME,OAAOV,KAAI,SAACW,GAClC,OAAO,cAAC,EAAD,CAAOlB,MAAOkB,EAAMC,cAAetB,OAAQqB,EAAME,mBAAoBf,OAAQa,EAAMb,OAAQC,SAAUY,EAAMZ,UAAeY,EAAMG,Q,EAM/IC,W,sBAAa,4BAAAC,EAAA,sEACY,EAAKC,WADjB,OACHP,EADG,OAET,EAAKQ,SAAS,CACVR,WAHK,2C,EAObO,SAAW,WACP,OAAOE,MAAM,iEACRC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GAAD,OAAUA,EAAKC,KAAKb,UACzBc,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,O,uDAvBpC,WACIG,KAAKb,e,oBAyBT,WAAU,IACEL,EAAWkB,KAAKpB,MAAhBE,OACR,OAAO,qBAAKhB,UAAWgB,EAAS,MAAQ,eAAjC,SAAkDA,EAASkB,KAAKnB,gBAAkB,gB,GAtC/EoB,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cbdffc9e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nimport LinesEllipsis from \"react-lines-ellipsis\";\r\n// class Movie extends Component {\r\n//     static propTypes = {\r\n//         title: PropTypes.string,\r\n//         poster: PropTypes.string,\r\n//     };\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <MoviePoster poster={this.props.poster} />\r\n//                 <h1>hello this is a {this.props.title}</h1>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => (\r\n                        <MovieGenre genre={genre} key={index} />\r\n                    ))}\r\n                </div>\r\n                <p className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis text={synopsis} maxLine=\"3\" ellipsis=\"...\" trimRight basedOn=\"letters\" />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction MoviePoster({ poster, alt }) {\r\n    return <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"></img>;\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n    return <span className=\"Movie_Genre\">{genre}</span>;\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired,\r\n};\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n};\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired,\r\n};\r\n// class MoviePoster extends Component {\r\n//     static propTypes = {\r\n//         poster: PropTypes.string.isRequired,\r\n//     };\r\n//     render() {\r\n//         return <img src={this.props.poster}></img>;\r\n//     }\r\n// }\r\nexport default Movie;\r\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n    // componentWillMount() {\n    //     console.log(\"will mount\");\n    // }\n    // componentDidMount() {\n    //     console.log(\"did mount\");\n    // }\n\n    state = {};\n\n    componentDidMount() {\n        this._getMovies();\n    }\n\n    _renderMovies = () => {\n        const movies = this.state.movies.map((movie) => {\n            return <Movie title={movie.title_english} poster={movie.medium_cover_image} genres={movie.genres} synopsis={movie.synopsis} key={movie.id} />;\n        });\n\n        return movies;\n    };\n\n    _getMovies = async () => {\n        const movies = await this._callApi();\n        this.setState({\n            movies, // same with movies : movies\n        });\n    };\n\n    _callApi = () => {\n        return fetch(\"https://yts.mx/api/v2/list_movies.json?sort_by=download_count\")\n            .then((res) => res.json())\n            .then((json) => json.data.movies)\n            .catch((err) => console.log(err));\n    };\n\n    render() {\n        const { movies } = this.state;\n        return <div className={movies ? \"App\" : \"App--loading\"}>{movies ? this._renderMovies() : \"Loading\"}</div>;\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}